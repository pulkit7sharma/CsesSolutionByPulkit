/*
segment tree with lazyPropagation storing max value of prefix sums for range [L....R] ......
answer will be for any range a to b max(psum[a...b]) - psum[a-1] .......
max(psum[a...b]) can be computed using segment tree....
updation process will use lazypropagation as to update a value at index i we have to increase all the prefix sum from index i to n 
with diff = new_val at i - old_val at i
*/
#include<bits/stdc++.h>
using namespace std;
const int mx = (int)2e5+7;
typedef long long int lli;
lli a[mx] , st[4*mx] , lazy[4*mx];
void build(int ss,int se,int si){
    if(ss==se){
       st[si] = a[ss];
       return;
    }
    int mid = (ss+se)/2;
    build(ss,mid,2*si+1);
    build(mid+1,se,2*si+2);
    st[si] = max(st[2*si+1],st[2*si+2]);
}
void updlazy(int ss,int se,int si){
    st[si] += lazy[si];
    if(ss!=se){
        lazy[2*si+1] += lazy[si];
        lazy[2*si+2] += lazy[si];
    }
    lazy[si] = 0;
    return;
}
 
void upd(int ss,int se,int si,int qs,int qe,lli v){
    updlazy(ss,se,si);
    if(qs > se || qe < ss)return;
    if(qs <= ss && qe >= se){
        st[si] += v;
        if(ss!=se){
            lazy[2*si+1] += v;
            lazy[2*si+2] += v;
        }
        return;
    }
    int mid = (ss+se)/2;
    upd(ss,mid,2*si+1,qs,qe,v);
    upd(mid+1,se,2*si+2,qs,qe,v);
    st[si] = max(st[2*si+1] , st[2*si+2]);
}
lli get(int ss,int se,int si,int qs,int qe){
    updlazy(ss,se,si);
    if(qs > se || qe  < ss)return -1e16;
    if(qs <= ss && qe >= se)return st[si];
    int mid = (ss+se)/2;
    return max(get(ss,mid,2*si+1,qs,qe) , get(mid+1,se,2*si+2,qs,qe));
}
 
int main() {
      ios_base::sync_with_stdio(0);
      cin.tie(0);
      cout.tie(0);
      int n,q,x,u,l,r; cin>>n>>q;
      lli val[n+1];
      for(int i = 1; i <= n ; i++){
          cin>>a[i];val[i] = a[i]; 
          a[i]+=a[i-1];
      }
      for(int i=0;i<4*mx;i++)st[i]=-1e16;
      build(1,n,1);
      while(q--){
          cin>>x>>l>>r;
          if(x==1){
              lli diff = r-val[l];
              upd(1,n,1,l,n,diff);
              val[l] = r;
          }
          else{
             lli left = (l-1 == 0 ? 0 : get(1,n,1,l-1,l-1));
             lli right = get(1,n,1,l,r);
             
             if(left > right)cout<<0<<"\n";
              else
              cout<<right-left<<"\n";
          }
      }
}
