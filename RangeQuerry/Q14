/*
 A Good Question to learn MO's Algorithm 
 */


#include<bits/stdc++.h>
using namespace std;
const int mx = 2e5+7;
typedef long long lli;
 
struct Querry{
    int l,r,idx;
};
int  sz;
bool comp(Querry& x, Querry& y){
    if(x.l/sz != y.l/sz)return x.l/sz < y.l/sz;
    return x.r < y.r;
}
 
int main() {
     ios_base::sync_with_stdio(0);
     cin.tie(0);
     cout.tie(0);
     int n,q,l,r;
     cin>>n>>q; sz = (int)sqrt(n);
     vector<int> a(n) , b(n);
     for(int i = 0; i  < n ; i++){
         cin>>a[i];b[i] =a[i];
     }
     sort(b.begin(),b.end());
     for(int i = 0 ; i < n ; i++){
         a[i] = upper_bound(b.begin(),b.end(),a[i])-b.begin();
     }
    Querry qr[q];
     vector<int> freq(n+1);
     int cl = 0 , cr = 0 , cnt = 0;
     for(int i = 0 ; i < q; i++){
         cin>>qr[i].l>>qr[i].r; qr[i].idx = i;
         qr[i].l--,qr[i].r--;
     }
     sort(qr,qr+q,comp);
     vector<int> ans(q);
     for(int i = 0; i < q; i++){
          l = qr[i].l , r  = qr[i].r;
         while(cl < l){
             freq[a[cl]]--;
             if(freq[a[cl]] == 0)cnt--;
             cl++;
         }
         while(cl > l){
             freq[a[cl-1]]++;
             if(freq[a[cl-1]] == 1)cnt++;
             cl--;
         }
         while(cr <= r){
             freq[a[cr]]++;
            if (freq[a[cr]] == 1) 
                cnt++;
            cr++;
         }
         while(cr > r+1){
             freq[a[cr-1]]--;
            if (freq[a[cr-1]] == 0) 
                cnt--;
            cr--;
         }
         ans[qr[i].idx] = cnt;
     }
     for(int x : ans)cout<<x<<"\n";
}
