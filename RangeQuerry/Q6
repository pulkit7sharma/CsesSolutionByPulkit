/*
A good problem to use Lazy Propagation...
*/
#include<bits/stdc++.h>
using namespace std;
const int mx = 2e5+7;
typedef long long lli;
lli a[mx];
lli st[4*mx] , lazy[4*mx];
void build(int ss,int se,int si){
    if(ss==se){
         st[si]=a[ss];
         return;
    }
    int mid = (ss+se)/2;
    build(ss,mid,2*si+1);
    build(mid+1,se,2*si+2);
    st[si] = st[2*si+1] + st[2*si+2];
}
void updlazy(int ss,int se,int si){
       st[si] += (se-ss+1) * 1ll * lazy[si];
       if(ss!=se){
           lazy[2*si+1] += lazy[si];
           lazy[2*si+2] += lazy[si];
       }
       lazy[si] = 0;
}
void upd(int ss,int se,int si,int qs,int qe,lli v){
    updlazy(ss,se,si);
    if(qs > se || qe < ss)return;
    if(qs <= ss && qe >= se){
        st[si] += (se-ss+1) * 1ll * v;
        if(ss!=se){
             lazy[2*si+1] += v;
             lazy[2*si+2] += v;
        }
        return;
    }
    int mid = (ss+se)/2;
    upd(ss,mid,2*si+1,qs,qe,v);
    upd(mid+1,se,2*si+2,qs,qe,v);
    st[si]=st[2*si+1] + st[2*si+2];
}
lli get(int ss,int se,int si,int qs,int qe){
    updlazy(ss,se,si);
    if(qs>se || qe < ss)return 0;
    if(qs<=ss && qe >= se)return st[si];
    int mid = (ss+se)/2;
    return get(ss,mid,2*si+1,qs,qe)+get(mid+1,se,2*si+2,qs,qe); 
}
int main() {
     int n,q,l,r,x; cin>>n>>q;
     for(int i=0;i<n;i++){cin>>a[i];}
     build(0,n-1,0);
     lli v;
     while(q--){
         cin>>x;
         cin>>l;
         if(x==1){
             cin>>r>>v;
             l--,r--;
             upd(0,n-1,0,l,r,v);
         }
         else{
            
             l--;r=l;
             cout<<get(0,n-1,0,l,r)<<"\n";
         }
     }
}
